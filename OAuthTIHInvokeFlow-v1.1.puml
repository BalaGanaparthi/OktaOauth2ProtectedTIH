@startuml TokenEnrichment
skinparam ParticipantPadding 10
skinparam BoxPadding 5
skinparam roundcorner 7
autonumber
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

title \n<u><b>Protect Token Inline Hook Service with Okta and OAuth2</b></u>\n

box "Resource Owner"  
    actor User as user
end box

box "Client" #f08080
    participant "ClientApp" as client 
end box

box "Okta " #LightSkyBlue 
    participant EndUser_AuthServer as eaz 
    participant M2M_AuthServer as maz
    participant M2MApp as ma
end box

box "Token Enrichment Service" #f08080
    participant TokenService as tkns
end box

box "Resource Servers" #f08080
    participant ResourceServer as rs
end box
|||| 
note across
    \t\t\t\t\t\t\t\t\t[<u>**Setup**</u>] 
    **M2MApp** : Configured with <i>client crentials</i> grant-type w/ <b>Public key / Private key</b> for Client authentication
    **M2MApp** : Not assigned to any users (Configured to be used as Internal-Only App)
    (<font color=blue>M2M = Machine to Machine</font>)
    **TokenService** : Configured with OAuth 2.0 Authentication and Client Authentication as Use private key
    **TokenService** : Whitelist Okta CIDR ranges (<i>https://s3.amazonaws.com/okta-ip-ranges/ip_ranges.json</i>)
end note
||||
==Clent request for User Tokens from EndUser AS==
||||
user o-> client  ++ #Grey : Access resource
note over client 
    ""Access protected <font color=Grey><i>ResourceServer</i></font>""
    ""from client w/o access-token""
end note
||||
client -> eaz ++ #gold : /authorize
note over eaz 
    ""Authorization code grant w/ PKCE(CC)""
    ""w/ ClientSPApp clientID""
    ""w/ Resource Server scopes ...""
end note
||||
group No Okta Session
||||
==User Authentication and Authorization==
||||
    eaz -> client : Prompt authN (optionally w/ MFA)
    user o-> client : Response to prompts
    note over client 
        ""Respond to authN (+ MFA) &""
        ""any required consents from""
        ""<font color=Grey><i>EndUser_AuthServer</i></font>""
    end note
    ||||
    client -> eaz : AuthN & AuthZ response(s)
    eaz -> eaz : check for m2m access token in cache
    ||||
    group m2m Access token not in cache
    ||||
    ==EndUser AS requests for machine to machine tokens from M2M AS using private-key signed jwt/client_assertions== 
    ||||
        eaz --> eaz  #Grey : generate client_assertion and sign w/ private key
        note over eaz
            ""Create JWT and Sign w\ Private Key""
            ""<i>aud</i> : EndUser_AuthServer's (token?) endpoint""
            ""<i>iss</i> : M2MApp client_id""
            ""<i>sub</i> : M2MApp client_id""
            ""<i>exp</i> : token's TTL (max 60mins)""
            ""...""
        end note
        ||||
        eaz -> maz ++ #gold: /token (client_creds with configured scopes)
        note over eaz
            ""Invoke /token endpoint with the following params""
            ""<font color=blue>grant_type</font> : <i>client_credentials</i>""
            ""<font color=blue>client_assertion_type</font> : ""
            ""  <i>urn:ietf:params:oauth:client-assertion-type:jwt-bearer</i>""
            ""<font color=blue><i>client_assertion</font> : <i>{Signed JWT w/ private-key}</i>""
            ""<font color=blue>scope</font> : <i>{w/ scopes configured during TIH registration}</i>""
        end note
        maz ->o ma : get pub key of sub (client id)
        note over maz
            ""Get the client_id (sub) in JWT and""
            ""Get KID of public key configured of the app""
            ""correcponding to client_id""
        end note
        ||||
        maz -> maz : validate client_assertion
        note over maz
            ""Validate the signed client_assertion with""
            ""the public key of app matching client_id""
        end note
        ||||
        maz -> eaz -- : send m2m access token
        eaz -> eaz : cache m2m access token (ttl 60mins?)
        ||||
    end
    ||||
    eaz -> eaz : generate policy based claims
    note over eaz
        ""Claims are calculated based on""
        ""requested scopes and token enrichment""
        ""(if done) at the token inline hook service""
    end note
    ||||
    group Successfully recieved m2m access token from M2M Authorization Server
    ||||
    ==EndUser AS executes token enrichment service with m2m access token==
    ||||
        eaz -> tkns ++ #Grey: invoke token endpoint with m2m access token
        tkns -> tkns : validate m2m token
        note over tkns
            ""Validate m2m access token JWT ""
            ""locally at TokenService""
            ""<i>iss, aud, sub, scp...</i>""
        end note
        ||||
        tkns -> tkns : enrich (+ ~ -) token claims
        note over tkns
            ""Allow Enrichment""
            ""on successful validation""
        end note
        ||||
        tkns -> eaz -- : enriched token(s)
        eaz -> eaz : create okta session for the user
        ||||    
    end
    ||||
end
||||
==OAuth2 flow to exchange code for (user) tokens==
||||
eaz -> client : respond with auth code
client -> eaz : /token with auth code
eaz -> eaz : mint token(s) with enriched claims
eaz -> client : send user token(s)
||||
==OAuth2 flow to access resource server with user's access token==
||||
client -> rs ++ #grey: Access Resource Server with the user token(s)
||||
@enduml